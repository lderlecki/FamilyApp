List of basic docker commands with examples below each commmand

1.Listing images

docker image ls

2.Deleting image

docker rmi -f <IMAGE ID>
docker rmi -f 15a39a1631b6

3.Creating image

docker build -t <IMAGE NAME:version> .
docker build -t my-new-app:v1 .

4.Running one image 

ANGULAR:
docker run -it -p 80:80/tcp --name <YOUR OWN NAME>  <IMAGE ID>
docker run -it -p 80:80/tcp --name my-new-app  15a39a1631b6
SPRING:
docker run -it -p 7997:8080 --name spring_app 23c21f96aa48

PROPER PORT FORWARDING SHOULD LOOK LIKE THIS (COLUMN PORTS)
0.0.0.0:7997->8080/tcp

IMPROPER PORT FORWADING (usually it means that second port value (after ':' ) is not corrrect)
8080/tcp, 0.0.0.0:7997->80/tcp

5.Listing containers

docker container ls

6.Listing ALL containers
docker container ls -a

7.Stopping container

docker stop <CONTAINER ID>
docker stop 15a39a1631b6

8.Deleting container

docker container rm <CONTAINER ID>
docker container rm 15a39a1631b6

you can delete multiple containers 

docker container rm 15a39a1631b6 98c98a131d3 17098a4354d


Docker ADD vs Copy
ADD może kopiować rzeczy z zewnątrz, jeśli zrobimy add i podamy jakiś adres URL to pobierze i rozpakuje dane

ports:
8000:8100 -> port 8000 udostępniamy na zewnątrz na port 8100
tzn. lokalnie można odpalić aplikację na localhost:8000/

depends_on:
mówi to o tym, ze razem z danym kontenerem uruchomi się inny kontener
services:
  django:
    ...
    depends_on:
      - db -> uruchamia kontener db przy uruchomieniu komendy docker-compose run django 
      (uruchomi się przed django, ale nie znaczy ot, ze skończy się inicjalizować przed django)

9.Docker compose

a) delete old images (if any exists)
docker-compose down -v --rmi
b) build new images 
docker-compose -f docker-compose.yml build
c) create containers and start services 
docker-compose up
d) shut down container and services
docker-compose down



